const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');


// –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB Atlas
const dbURI = 'mongodb+srv://damir:qwerty123@cluster0.brkmijq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect(dbURI);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
mongoose.connection.on('connected', () => {
    console.log('Connected to MongoDB Atlas');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
mongoose.connection.on('error', (err) => {
    console.error('MongoDB Atlas connection error:', err);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
mongoose.connection.on('disconnected', () => {
    console.log('Disconnected from MongoDB Atlas');
});

// –î–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('SIGINT', () => {
    mongoose.connection.close(() => {
        console.log('MongoDB Atlas connection closed due to application termination');
        process.exit(0);
    });
});



const addressSchema = new mongoose.Schema({
    firstAddressText: String,
    secondAddressText: String,
    price: Number,
    phone: String,
});
const addressSchema1 = new mongoose.Schema({
    firstAddressText: String,
    secondAddressText: String,
    date: String,
    people: Number,
    price: Number,
    phone: String,
});
const addressSchema2 = new mongoose.Schema({
    firstAddressText: String,
    secondAddressText: String,
    type: String,
    price: Number,
    phone: String,
});
const addressSchema3 = new mongoose.Schema({
    driver_id: String,
    firstname: String,
    secondname: String,
    carModel: String,
    carNumber: String,
    phone: String,
    cardnumber: String,
});
const userSchema = new mongoose.Schema({
    user_number: { type: String, required: true },
    balance: { type: Number, default: 0 } // –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
});

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = mongoose.model('User', userSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let balance1 = ' ';
let user_number = ' ';
async function adding_balance(chatId) {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');

        // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userNumberResponse = await waitForUserResponse(chatId);
        const userNumber = userNumberResponse.text;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –±–∞–ª–∞–Ω—Å–∞
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:');

        // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const amountResponse = await waitForUserResponse(chatId);
        const amount = parseFloat(amountResponse.text);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let user = await User.findOne({ user_number: userNumber });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        if (!user) {
            user = new User({
                user_number: userNumber,
                balance: 0
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        user.balance += amount;
        balance1 = user.balance;
        user_number = userNumber;
        console.log(userNumber);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await user.save();

        await bot.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance}`);
    } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
    }
}

const Address = mongoose.model('Address', addressSchema);
const AddressForCity = mongoose.model('AddressForCity', addressSchema1);
const AddressForDelivery = mongoose.model('AddressForDelivery', addressSchema2);
const taxiDates = mongoose.model('taxiDates', addressSchema3);


// –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –≤–∞–º BotFather
const token = '7058257956:AAGn-P8WiplGNtPhG-j3cVIXCHCAbIpaCZw';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
let regionSelected = false;

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞ /start –∏ —Ä–µ–≥–∏–æ–Ω –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if (messageText === '/start') {
        sendButtonsForRegion1(chatId);
    }
});


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –†–µ–≥–∏–æ–Ω–∞ 1
function sendButtonsForRegion1(chatId) {
    const keyboard = {
        reply_markup: {
            keyboard: [
                ['–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É'],
                ['–¢–∞–∫—Å–∏ —à–∞“õ—ã—Ä—É'],
                ['–ñ–µ—Ç–∫—ñ–∑—É(–î–æ—Å—Ç–∞–≤–∫–∞)'],
                ['“ö—ã–∑—ã–ª–æ—Ä–¥–∞“ì–∞ —Ç–∞–∫—Å–∏'],
                ['–ê–∑—ã“õ-—Ç“Ø–ª—ñ–∫–∫–µ —Ç–∞–ø—Å—ã—Ä—ã—Å'],
                ['–î”ô—Ä—ñ—Ö–∞–Ω–∞–ª–∞—Ä'],
                ['–ì“Ø–ª–¥–µ—Ä'],
                ['–¢–∞–∫—Å–∏ –±–æ–ª—É'],

            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    bot.sendMessage(chatId, '–°–∞–ª–µ–º! –°—ñ–∑–≥–µ “õ–∞–Ω–¥–∞–π “õ—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç–µ –∞–ª–∞–º—ã–Ω?', keyboard);
}
const commands = [
    { command: "start", description: "–ú”ô–∑—ñ—Ä" },
    { command: "taxi", description: "–¢–∞–∫—Å–∏ —à–∞“õ—ã—Ä—É" },
    { command: "partner", description: "–°–µ—Ä—ñ–∫—Ç–µ—Å –±–æ–ª—É" },
];

bot.setMyCommands(commands).then(() => {
    console.log('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}).catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:', error);
});
let isKyzylordaRequest = false;
async function handleTaxiForQyzylordaRequest(chatId) {
    const chat = await bot.getChat(chatId);
    const firstname = chat.first_name;
    await bot.sendMessage(chatId, '–®—ã“ì–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
    const firstMessage = await waitForUserResponse(chatId);
    await bot.sendMessage(chatId, '–ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
    const secondMessage = await waitForUserResponse(chatId);
    await bot.sendMessage(chatId, '“ö–∞–π —É–∞“õ—ã—Ç“õ–∞? (–∫“Ø–Ω—ñ/—É–∞“õ—ã—Ç—ã)');
    const date = await waitForUserResponse(chatId);
    const peopleOptions = {
        reply_markup: {
            keyboard: [
                [{ text: '1' }, { text: '2' }, { text: '3' }, { text: '4' }]
            ]
        }
    }
    await bot.sendMessage(chatId, '“ö–∞–Ω—à–∞ –∞–¥–∞–º –º—ñ–Ω–µ—Å—ñ–∑–¥–µ—Ä?', peopleOptions);
    const people = await waitForUserResponse(chatId);
    const priceOptions = {
        reply_markup: {
            keyboard: [
                [{ text: '350' }, { text: '400' }, { text: '450' }],
                [{ text: '500' }, { text: '550' }, { text: '600' }, ],
                [{ text: '700' }, { text: '800' }, { text: '1000' }, ],
                [{ text: '1500' }, { text: '2000' }, { text: '5000' }, ],
                [{ text: '6000' }, { text: '8000' }, { text: '10000' }, ]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '“∞—Å—ã–Ω–∞—Ç—ã–Ω –±–∞“ì–∞“£—ã–∑ (‚Ç∏)? –ë–∞“ì–∞–Ω—ã —Å–∞–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ç”©–º–µ–Ω–¥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã.', priceOptions);
    const price = await waitForUserResponse(chatId);
    const contactRequest = {
        reply_markup: {
            keyboard: [
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä –∂—ñ–±–µ—Ä—É', request_contact: true }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);
    const phone = await waitForUserResponse(chatId);


    bot.onText(/üåé –®—ã“ìa—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π./, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–®—ã“ì–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            firstMessage.text = newAddress;
            try {
                await Address.findOneAndUpdate({}, { firstAddressText: firstMessage.text });
                console.log(firstMessage.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }


        });


    });

    bot.onText(/üåé –ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π./, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            secondMessage.text = newAddress;
            try {
                await AddressForCity.findOneAndUpdate({}, { secondAddressText: secondMessage.text });
                console.log(secondMessage.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/‚è∞ –£–∞“õ—ã—Ç./, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“ö–∞–π —É–∞“õ—ã—Ç“õ–∞? (–∫“Ø–Ω—ñ/—É–∞“õ—ã—Ç—ã)');
        bot.once('text', async(addressMsg) => {
            const newDate = addressMsg.text;
            date.text = newDate;
            try {
                await AddressForCity.findOneAndUpdate({}, { date: date.text });
                console.log(date.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üë§ –ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã./, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“ö–∞–Ω—à–∞ –∞–¥–∞–º –º—ñ–Ω–µ—Å—ñ–∑–¥–µ—Ä?', peopleOptions);
        bot.once('text', async(addressMsg) => {
            const newPeople = addressMsg.text;
            people.text = newPeople;
            try {
                await Address.findOneAndUpdate({}, { people: people.text });
                console.log(people.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });

    bot.onText(/üíµ –ñ–æ–ª –∞“õ—ã—Å—ã./, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“∞—Å—ã–Ω–∞—Ç—ã–Ω –±–∞“ì–∞“£—ã–∑ (‚Ç∏)? –ë–∞“ì–∞–Ω—ã —Å–∞–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ç”©–º–µ–Ω–¥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã.', priceOptions);
        bot.once('text', async(addressMsg) => {
            const newPrice = addressMsg.text;
            price.text = newPrice;
            try {
                await Address.findOneAndUpdate({}, { price: price.text });
                console.log(price.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });


    bot.onText(/üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä./, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);

        bot.once('contact', async(contactMsg) => {
            const chatId = contactMsg.chat.id;
            if (contactMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?') {
                const newPhoneFromContact = contactMsg.contact.phone_number;
                phoneText = newPhoneFromContact;
                try {
                    await Address.findOneAndUpdate({}, { phone: phoneText });
                    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

        bot.once('text', async(textMsg) => {
            const chatId = textMsg.chat.id;

            if (textMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?' && textMsg.text.length === 11) {
                const newPhoneFromText = textMsg.text;
                phoneText = newPhoneFromText;
                try {
                    await Address.findOneAndUpdate({}, { phone: phoneText });
                    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

    });

    phoneText = phone.contact ? phone.contact.phone_number.toString() : (phone.text && phone.text.length === 11 ? phone.text : '');
    const addressesForCity = new AddressForCity({
        firstAddressText: firstMessage.text,
        secondAddressText: secondMessage.text,
        date: date.text,
        people: people.text,
        price: price.text,
        phone: phoneText,

    });



    const savedAddress = await addressesForCity.save();
    savedAddressId = savedAddress._id;
    console.log(savedAddress);
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: '‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É' }],
                [{ text: 'üñä ”®–∑–≥–µ—Ä—ñ—Å –µ–Ω–≥—ñ–∑—É' }],
                [{ text: '‚ùå –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂–æ—é' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
    forwardmessage = `<b>---–ñ–ê“¢–ê –¢–ê–ü–°–´–†–´–°---</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${date.text} \n<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} \n\n<b>–¢–∞–ø—Å—ã—Ä—ã—Å —Ç–∏–ø—ñ: “ö—ã–∑—ã–ª–æ—Ä–¥–∞“ì–∞ —Ç–∞–∫—Å–∏</b> \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>`;
    destination_message = `<b>${firstname} —Å—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã.</b>
    \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å ‚Ññ</b> ${chatId}
\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text}
<b>–£–∞“õ—ã—Ç—ã:</b> ${date.text} 
<b>–ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã:</b> ${people.text} 
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏`;
    client_phone = phoneText;
    order_price = price.text;
}
async function handleTaxiRequest(chatId) {
    const chat = await bot.getChat(chatId);
    const firstname = chat.first_name;
    await bot.sendMessage(chatId, '–®—ã“ì–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
    const firstMessage = await waitForUserResponse(chatId);
    await bot.sendMessage(chatId, '–ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
    const secondMessage = await waitForUserResponse(chatId);
    const priceOptions = {
        reply_markup: {
            keyboard: [
                [{ text: '350' }, { text: '400' }, { text: '450' }],
                [{ text: '500' }, { text: '550' }, { text: '600' }, ],
                [{ text: '700' }, { text: '800' }, { text: '1000' }, ],
                [{ text: '1500' }, { text: '2000' }, { text: '5000' }, ],
                [{ text: '6000' }, { text: '8000' }, { text: '10000' }, ]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '“∞—Å—ã–Ω–∞—Ç—ã–Ω –±–∞“ì–∞“£—ã–∑ (‚Ç∏)? –ë–∞“ì–∞–Ω—ã —Å–∞–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ç”©–º–µ–Ω–¥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã.', priceOptions);
    const price = await waitForUserResponse(chatId);
    const contactRequest = {
        reply_markup: {
            keyboard: [
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä –∂—ñ–±–µ—Ä—É', request_contact: true }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);
    const phone = await waitForUserResponse(chatId);


    bot.onText(/üåé –®—ã“ì–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–®—ã“ì–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            firstMessage.text = newAddress;
            try {
                await Address.findOneAndUpdate({}, { firstAddressText: firstMessage.text });
                console.log(firstMessage.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }


        });


    });

    bot.onText(/üåé –ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑?');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            secondMessage.text = newAddress;
            try {
                await Address.findOneAndUpdate({}, { secondAddressText: secondMessage.text });
                console.log(secondMessage.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });


    bot.onText(/üíµ –ñ–æ–ª –∞“õ—ã—Å—ã/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“∞—Å—ã–Ω–∞—Ç—ã–Ω –±–∞“ì–∞“£—ã–∑ (‚Ç∏)? –ë–∞“ì–∞–Ω—ã —Å–∞–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ç”©–º–µ–Ω–¥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã.', priceOptions);
        bot.once('text', async(addressMsg) => {
            const newPrice = addressMsg.text;
            price.text = newPrice;
            try {
                await Address.findOneAndUpdate({}, { price: price.text });
                console.log(price.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });


    bot.onText(/üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);

        bot.once('contact', async(contactMsg) => {
            const chatId = contactMsg.chat.id;
            if (contactMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?') {
                const newPhoneFromContact = contactMsg.contact.phone_number;
                phoneText = newPhoneFromContact;
                try {
                    await Address.findOneAndUpdate({}, { phone: phoneText });
                    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

        bot.once('text', async(textMsg) => {
            const chatId = textMsg.chat.id;

            if (textMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?' && textMsg.text.length === 11) {
                const newPhoneFromText = textMsg.text;
                phoneText = newPhoneFromText;
                try {
                    await Address.findOneAndUpdate({}, { phone: phoneText });
                    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

    });

    phoneText = phone.contact ? phone.contact.phone_number.toString() : (phone.text && phone.text.length === 11 ? phone.text : '');
    const addresses = new Address({
        firstAddressText: firstMessage.text,
        secondAddressText: secondMessage.text,
        price: price.text,
        phone: phoneText,

    });



    const savedAddress = await addresses.save();
    savedAddressId = savedAddress._id;
    console.log(savedAddress);
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: '‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É' }],
                [{ text: 'üñä ”®–∑–≥–µ—Ä—ñc –µ–Ω–≥—ñ–∑—É' }],
                [{ text: '‚ùå –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂–æ—é' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text}  \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
    forwardmessage = `<b>---–ñ–ê“¢–ê –¢–ê–ü–°–´–†–´–°---</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>`;
    destination_message = `<b>${firstname} —Å—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã.</b>
    \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å ‚Ññ</b> ${chatId}
    \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å —Ç–∏–ø—ñ: “ö—ã–∑—ã–ª–æ—Ä–¥–∞“ì–∞ —Ç–∞–∫—Å–∏</b>
\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text}
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏`;
    client_phone = phoneText;
    order_price = price.text;
}
let isPartnerRequest = false;

async function handlePartnerRequest(chatId) {
    let driver = await taxiDates.findOne({ driver_id: String(chatId).substring(0, 5) });

    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: '‚úÖ ”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É' }],
                [{ text: 'üñä ”®–∑–≥–µp—ñ—Å –µ–Ω–≥—ñ–∑—É' }],
                [{ text: '‚ùå ”®—Ç—ñ–Ω—ñ–º–¥—ñ –∂–æ—é' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    const contactRequest = {
        reply_markup: {
            keyboard: [
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä –∂—ñ–±–µ—Ä—É', request_contact: true }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    if (!driver) {
        await bot.sendMessage(chatId, '–ï—Å—ñ–º—ñ“£—ñ–∑:');
        const firstnameText = await waitForUserResponse(chatId);
        await bot.sendMessage(chatId, '–¢–µ–≥—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:');
        const secondnameText = await waitForUserResponse(chatId);
        await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);
        const phone = await waitForUserResponse(chatId);
        await bot.sendMessage(chatId, 'Kaspi Gold-—Ç–∞“ì—ã —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑? (–¢”©–ª–µ–º “Ø—à—ñ–Ω), (–ú—ã—Å. 87054651125)');
        const cardNumber = await waitForUserResponse(chatId);
        await bot.sendMessage(chatId, '–ö”©–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ“£ –º–æ–¥–µ–ª—ñ “õ–∞–Ω–¥–∞–π? (–ú—ã—Å. –¢–æ–π–æ—Ç–∞ 40 “õ–∞—Ä–∞ —Ç“Ø—Å—Ç—ñ)');
        const carModel = await waitForUserResponse(chatId);
        await bot.sendMessage(chatId, '–ö”©–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ“£ –Ω–æ–º–µ—Ä—ñ–Ω –∂–∞–∑—ã“£—ã–∑. (–ú—ã—Å. 156-AFT)');
        const carNumberText = await waitForUserResponse(chatId); // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ carNumberText
        phoneText = phone.contact ? phone.contact.phone_number.toString() : (phone.text && phone.text.length === 11 ? phone.text : '');
        driver = new taxiDates({
            driver_id: String(chatId).substring(0, 5),
            firstname: firstnameText.text,
            secondname: secondnameText.text,
            carModel: carModel.text,
            carNumber: carNumberText.text, // –ò—Å–ø–æ–ª—å–∑—É–µ–º carNumberText –≤–º–µ—Å—Ç–æ carNumber
            phone: phoneText,
            cardnumber: cardNumber.text,
        });
        const savedAddress = await driver.save();
        savedAddressId = savedAddress._id;

        await bot.sendMessage(chatId, `<b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
    \n<b>–ï—Å—ñ–º—ñ:</b> ${firstnameText.text}
<b>–¢–µ–≥—ñ:</b> ${secondnameText.text} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${carModel.text}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${carNumberText.text}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ phoneText }
<b>Kaspi Gold:</b> ${cardNumber.text} 
    \n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
    - ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
        contract = `<b>–ö–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç</b> ‚Ññ${chatId} 
    \n–ñ–ö "–ñ–∞–ª–∞“ì–∞—à –¢–∞–∫—Å–∏" –∂”ô–Ω–µ ${secondnameText.text} ${firstnameText.text} (–∞—Ä—ã“õ–∞—Ä–∞–π –°–µ—Ä—ñ–∫—Ç–µ—Å) –∞—Ä–∞—Å—ã–Ω–¥–∞“ì–∞ –∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç.
    \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä —á–∞—Ç—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª—É –∞—Ä“õ—ã–ª—ã </b>, —Å—ñ–∑ –∫–µ–ª–µ—Å—ñ –±–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω —à–∞—Ä—Ç—Ç–∞—Ä“ì–∞ ”©–∑ –∫–µ–ª—ñ—Å—ñ–º—ñ“£—ñ–∑–¥—ñ –±–µ—Ä–µ—Å—ñ–∑:  
-–ñ–µ–∫–µ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ ”©“£–¥–µ—É–≥–µ –∂”ô–Ω–µ —Å–∞“õ—Ç–∞—É“ì–∞ 
-”ò—Ä “õ–∞–±—ã–ª–¥–∞“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥–∞–Ω 10 % –∫–æ–º–∏—Å—Å–∏—è –∞–ª—ã–Ω—É—ã–Ω–∞ 
-2000‚Ç∏ –∂–æ“ì–∞—Ä—ã —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä“ì–∞ –∫–æ–º–∏—Å—Å–∏—è –∫”©–ª–µ–º—ñ 5 % “õ“±—Ä–∞–π–¥—ã
\n<b>–ß–∞—Ç“õ–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω</b>, –±—ñ—Ä–¥–µ–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞–π –∞–ª–∞—Å—ã–∑: 
-–ë–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥–∞ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Ç—ñ –¥”ô—Ä–µ–∂–µ–¥–µ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞–Ω –∞–ª–∞—Ç—ã–Ω <b>–∫–æ–º–∏—Å—Å–∏—è —Å–æ–º–º–∞—Å—ã</b> –±–æ–ª—É—ã –∫–µ—Ä–µ–∫ 
-–ë–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥—ã —Ç–æ–ª—Ç—ã—Ä—É “Ø—à—ñ–Ω –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–¥–µ–≥—ñ <b>–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω–∞ ”©—Ç—É “õ–∞–∂–µ—Ç
\n–ö–µ–ª–µ—Å—ñ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω —Ç–∞–ª–∞–ø—Ç–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–º–∞—Å–∞“£—ã–∑, <b>–∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç –±—ñ—Ä–∂–∞“õ—Ç—ã –±“±–∑—ã–ª–∞–¥—ã:</b> 
-–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–±—ã–ª–¥–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –∫–ª–∏–µ–Ω—Ç–∫–µ –∫–µ—à—ñ–≥—ñ–ø –±–∞—Ä—É 
-“ö–∞–±—ã–ª–¥–∞“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å“õ–∞ –±–∞—Ä–º–∞—Å–∞“£—ã–∑ 
-–ö–ª–∏–µ–Ω—Ç—Ç–µ–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –±–∞“ì–∞–¥–∞–Ω –∞—Ä—Ç—ã“õ —Å“±—Ä–∞“ì–∞–Ω–¥–∞ 
-–ö–ª–∏–µ–Ω—Ç–∫–µ –¥”©—Ä–µ–∫–µ —Å”©–π–ª–µ—Å–µ“£—ñ–∑ 
-–ö”©–ª—ñ–∫ —ñ—à—ñ–Ω–¥–µ –∞—Ä—Ç—ã“õ –∞–¥–∞–º –±–æ–ª—Å–∞ 
-–ë–∞—Å“õ–∞ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ “õ–∞–±—ã–ª–¥–∞“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å“õ–∞ –±–∞—Ä—Å–∞“£—ã–∑ 
-–ö”©–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ“£ —ñ—à—ñ –ª–∞—Å –±–æ–ª—Å–∞
\n–°–µ—Ä—ñ–∫—Ç–µ—Å—Ç–µ –ø–∞—Ç–µ–Ω—Ç –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.–ï–≥–µ—Ä –ø–∞—Ç–µ–Ω—Ç –±–æ–ª–º–∞“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞, –∂–∞—É–∞–ø–∫–µ—Ä—à—ñ–ª—ñ–∫—Ç—ñ –°–µ—Ä—ñ–∫—Ç–µ—Å <b>”©–∑—ñ–Ω–µ –∞–ª–∞–¥—ã.</b>
\n–ï“£–≥—ñ–∑—ñ–ª–≥–µ–Ω –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ“£ —Ä–∞—Å—Ç—ã“ì—ã–Ω–∞ –°–µ—Ä—ñ–∫—Ç–µ—Å <b>–∫–µ–ø—ñ–ª–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ.</b>
\n<b>–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑!</b> –¢–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä —á–∞—Ç—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª—É –∞—Ä“õ—ã–ª—ã –∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç“õ–∞ ”©–∑ –∫–µ–ª—ñ—Å—ñ–º—ñ“£—ñ–∑–¥—ñ –±–µ—Ä–µ—Å—ñ–∑ 
<b>–£–∞“õ—ã—Ç—ã:</b> ${new Date().toLocaleString()}`

    } else if (driver) {
        contract = `<b>–ö–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç</b> ‚Ññ${chatId} 
        \n–ñ–ö "–ñ–∞–ª–∞“ì–∞—à –¢–∞–∫—Å–∏" –∂”ô–Ω–µ ${driver.secondname} ${driver.firstname} (–∞—Ä—ã“õ–∞—Ä–∞–π –°–µ—Ä—ñ–∫—Ç–µ—Å) –∞—Ä–∞—Å—ã–Ω–¥–∞“ì–∞ –∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç.
        \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä —á–∞—Ç—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª—É –∞—Ä“õ—ã–ª—ã </b>, —Å—ñ–∑ –∫–µ–ª–µ—Å—ñ –±–µ–∫—ñ—Ç—ñ–ª–≥–µ–Ω —à–∞—Ä—Ç—Ç–∞—Ä“ì–∞ ”©–∑ –∫–µ–ª—ñ—Å—ñ–º—ñ“£—ñ–∑–¥—ñ –±–µ—Ä–µ—Å—ñ–∑:  
    -–ñ–µ–∫–µ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ ”©“£–¥–µ—É–≥–µ –∂”ô–Ω–µ —Å–∞“õ—Ç–∞—É“ì–∞ 
    -”ò—Ä “õ–∞–±—ã–ª–¥–∞“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥–∞–Ω 10 % –∫–æ–º–∏—Å—Å–∏—è –∞–ª—ã–Ω—É—ã–Ω–∞ 
    -2000‚Ç∏ –∂–æ“ì–∞—Ä—ã —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä“ì–∞ –∫–æ–º–∏—Å—Å–∏—è –∫”©–ª–µ–º—ñ 5 % “õ“±—Ä–∞–π–¥—ã
    \n<b>–ß–∞—Ç“õ–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω</b>, –±—ñ—Ä–¥–µ–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞–π –∞–ª–∞—Å—ã–∑: 
    -–ë–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥–∞ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Ç—ñ –¥”ô—Ä–µ–∂–µ–¥–µ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞–Ω –∞–ª–∞—Ç—ã–Ω <b>–∫–æ–º–∏—Å—Å–∏—è —Å–æ–º–º–∞—Å—ã</b> –±–æ–ª—É—ã –∫–µ—Ä–µ–∫ 
    -–ë–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥—ã —Ç–æ–ª—Ç—ã—Ä—É “Ø—à—ñ–Ω –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–¥–µ–≥—ñ <b>–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω–∞ ”©—Ç—É “õ–∞–∂–µ—Ç
    \n–ö–µ–ª–µ—Å—ñ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω —Ç–∞–ª–∞–ø—Ç–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞–º–∞—Å–∞“£—ã–∑, <b>–∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç –±—ñ—Ä–∂–∞“õ—Ç—ã –±“±–∑—ã–ª–∞–¥—ã:</b> 
    -–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–±—ã–ª–¥–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –∫–ª–∏–µ–Ω—Ç–∫–µ –∫–µ—à—ñ–≥—ñ–ø –±–∞—Ä—É 
    -“ö–∞–±—ã–ª–¥–∞“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å“õ–∞ –±–∞—Ä–º–∞—Å–∞“£—ã–∑ 
    -–ö–ª–∏–µ–Ω—Ç—Ç–µ–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –±–∞“ì–∞–¥–∞–Ω –∞—Ä—Ç—ã“õ —Å“±—Ä–∞“ì–∞–Ω–¥–∞ 
    -–ö–ª–∏–µ–Ω—Ç–∫–µ –¥”©—Ä–µ–∫–µ —Å”©–π–ª–µ—Å–µ“£—ñ–∑ 
    -–ö”©–ª—ñ–∫ —ñ—à—ñ–Ω–¥–µ –∞—Ä—Ç—ã“õ –∞–¥–∞–º –±–æ–ª—Å–∞ 
    -–ë–∞—Å“õ–∞ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ “õ–∞–±—ã–ª–¥–∞“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å“õ–∞ –±–∞—Ä—Å–∞“£—ã–∑ 
    -–ö”©–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ“£ —ñ—à—ñ –ª–∞—Å –±–æ–ª—Å–∞
    \n–°–µ—Ä—ñ–∫—Ç–µ—Å—Ç–µ –ø–∞—Ç–µ–Ω—Ç –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.–ï–≥–µ—Ä –ø–∞—Ç–µ–Ω—Ç –±–æ–ª–º–∞“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞, –∂–∞—É–∞–ø–∫–µ—Ä—à—ñ–ª—ñ–∫—Ç—ñ –°–µ—Ä—ñ–∫—Ç–µ—Å <b>”©–∑—ñ–Ω–µ –∞–ª–∞–¥—ã.</b>
    \n–ï“£–≥—ñ–∑—ñ–ª–≥–µ–Ω –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ“£ —Ä–∞—Å—Ç—ã“ì—ã–Ω–∞ –°–µ—Ä—ñ–∫—Ç–µ—Å <b>–∫–µ–ø—ñ–ª–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ.</b>
    \n<b>–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑!</b> –¢–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä —á–∞—Ç—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª—É –∞—Ä“õ—ã–ª—ã –∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç“õ–∞ ”©–∑ –∫–µ–ª—ñ—Å—ñ–º—ñ“£—ñ–∑–¥—ñ –±–µ—Ä–µ—Å—ñ–∑ 
    <b>–£–∞“õ—ã—Ç—ã:</b> ${new Date().toLocaleString()}`
        await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
\n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
\n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
- ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
    }
    bot.onText(/üöπ ‚Äç–ï—Å—ñ–º—ñ/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–ï—Å—ñ–º—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            driver.firstname = newAddress;
            console.log(driver.firstname);
            try {
                await Address.findOneAndUpdate({}, { firstname: driver.firstname });
                await driver.save();
                await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
\n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
\n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 

- ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üí≥ KASPI GOLD/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, 'Kaspi Gold-—Ç–∞“ì—ã —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑? (–¢”©–ª–µ–º “Ø—à—ñ–Ω), (–ú—ã—Å. 87054651125)');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            driver.cardnumber = newAddress;
            try {
                await Address.findOneAndUpdate({}, { cardnumber: driver.cardnumber });
                await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
\n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
\n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
- ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üöπ ‚Äç–¢–µ–≥—ñ/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–¢–µ–≥—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑ (–§–∞–º–∏–ª–∏—è)');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            driver.secondname = newAddress;
            try {
                await Address.findOneAndUpdate({}, { secondname: driver.secondname });
                await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
\n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
\n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
- ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üöò –ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–ö”©–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ“£ –º–æ–¥–µ–ª—ñ “õ–∞–Ω–¥–∞–π? (–ú—ã—Å. –¢–æ–π–æ—Ç–∞ 40 “õ–∞—Ä–∞ —Ç“Ø—Å—Ç—ñ)');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            driver.carModel = newAddress;
            try {
                await Address.findOneAndUpdate({}, { carModel: driver.carModel });
                await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
\n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
\n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
- ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üöò –ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–ö”©–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ“£ –Ω–æ–º–µ—Ä—ñ–Ω –∂–∞–∑—ã“£—ã–∑. (–ú—ã—Å. 156-AFT)');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            driver.carNumber = newAddress;
            try {
                await Address.findOneAndUpdate({}, { carNumber: driver.carNumber });
                await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
\n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
\n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
- ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–ºe—Ä—ñ/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);

        bot.once('contact', async(contactMsg) => {
            const chatId = contactMsg.chat.id;
            if (contactMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?') {
                const newPhoneFromContact = contactMsg.contact.phone_number;
                driver.phone = newPhoneFromContact;
                try {
                    await Address.findOneAndUpdate({}, { phone: driver.phone });
                    await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
                    \n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
                    \n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
                    - ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

        bot.once('text', async(textMsg) => {
            const chatId = textMsg.chat.id;

            if (textMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?' && textMsg.text.length === 11) {
                const newPhoneFromText = textMsg.text;
                driver.phone = newPhoneFromText;
                try {
                    await Address.findOneAndUpdate({}, { phone: driver.phone });
                    await bot.sendMessage(chatId, ` <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ</b> —Ä–∞—Å—Ç–∞“£—ã–∑ 
                    \n<b>–ï—Å—ñ–º—ñ:</b> ${driver.firstname}
<b>–¢–µ–≥—ñ:</b> ${driver.secondname} 
<b>–ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${ driver.phone }
<b>Kaspi Gold:</b> ${driver.cardnumber} 
                    \n”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω 
                    - ‚úÖ <b>”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç `, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

    });

}

let isDeliveryRequest = false;
async function handleDeliveryRequest(chatId) {
    const chat = await bot.getChat(chatId);
    const firstname = chat.first_name;
    await bot.sendMessage(chatId, '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–π –∂–µ—Ä–¥–µ–Ω –∞–ª—ã–ø –∫–µ—Ç—É “õ–∞–∂–µ—Ç?');
    const firstMessage = await waitForUserResponse(chatId);
    await bot.sendMessage(chatId, '“ö–∞–π –∂–µ—Ä–≥–µ –∞–ø–∞—Ä—É “õ–∞–∂–µ—Ç?');
    const secondMessage = await waitForUserResponse(chatId);
    await bot.sendMessage(chatId, '“ö–∞–Ω–¥–∞–π –∑–∞—Ç—Ç—ã –∞–ø–∞—Ä—É “õ–∞–∂–µ—Ç? (“õ–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä—ñ“£—ñ–∑)');
    const type = await waitForUserResponse(chatId);
    const priceOptions = {
        reply_markup: {
            keyboard: [
                [{ text: '350' }, { text: '400' }, { text: '450' }],
                [{ text: '500' }, { text: '550' }, { text: '600' }, ],
                [{ text: '700' }, { text: '800' }, { text: '1000' }, ],
                [{ text: '1500' }, { text: '2000' }, { text: '5000' }, ],
                [{ text: '6000' }, { text: '8000' }, { text: '10000' }, ]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '“∞—Å—ã–Ω–∞—Ç—ã–Ω –±–∞“ì–∞“£—ã–∑ (‚Ç∏)? –ë–∞“ì–∞–Ω—ã —Å–∞–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ç”©–º–µ–Ω–¥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã.', priceOptions);
    const price = await waitForUserResponse(chatId);
    const contactRequest = {
        reply_markup: {
            keyboard: [
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä –∂—ñ–±–µ—Ä—É', request_contact: true }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };

    await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);
    const phone = await waitForUserResponse(chatId);


    bot.onText(/üåé –ê–ª—ã–ø –∫–µ—Ç–µ—Ç—ñ–Ω –º–µ–∫–µ–Ω-–∂–∞–π/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–π –∂–µ—Ä–¥–µ–Ω –∞–ª—ã–ø –∫–µ—Ç—É “õ–∞–∂–µ—Ç?');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            firstMessage.text = newAddress;
            try {
                await Address.findOneAndUpdate({}, { firstAddressText: firstMessage.text });
                console.log(firstMessage.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> 
                \n <b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} 
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text}  
<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text} 
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏  
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText}
\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
-‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }


        });


    });

    bot.onText(/üåé –ñ–µ—Ç–∫—ñ–∑–µ—Ç—ñ–Ω –º–µ–∫–µ–Ω-–∂–∞–π/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“ö–∞–π –∂–µ—Ä–≥–µ –∞–ø–∞—Ä—É “õ–∞–∂–µ—Ç?');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            secondMessage.text = newAddress;
            try {
                await Address.findOneAndUpdate({}, { secondAddressText: secondMessage.text });
                console.log(secondMessage.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> 
                \n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} 
<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text}
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ 
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText}
    \n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });
    bot.onText(/üìã “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç/, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“ö–∞–Ω–¥–∞–π –∑–∞—Ç—Ç—ã –∞–ø–∞—Ä—É “õ–∞–∂–µ—Ç? (“õ–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä—ñ“£—ñ–∑)');
        bot.once('text', async(addressMsg) => {
            const newAddress = addressMsg.text;
            type.text = newAddress;
            try {
                await Address.findOneAndUpdate({}, { type: type.text });
                console.log(type.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> 
                \n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} 
<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text}
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ 
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText}
    \n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });


    bot.onText(/üíµ –ñ–æ–ª –∞“õ—ã—Å—ã../, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '“∞—Å—ã–Ω–∞—Ç—ã–Ω –±–∞“ì–∞“£—ã–∑ (‚Ç∏)? –ë–∞“ì–∞–Ω—ã —Å–∞–Ω —Ä–µ—Ç—ñ–Ω–¥–µ —Ç”©–º–µ–Ω–¥–µ –∂–∞–∑—Å–∞“£—ã–∑ –±–æ–ª–∞–¥—ã.', priceOptions);
        bot.once('text', async(addressMsg) => {
            const newPrice = addressMsg.text;
            price.text = newPrice;
            try {
                await Address.findOneAndUpdate({}, { price: price.text });
                console.log(price.text);
                await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> 
                \n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} 
<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text}
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ 
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText}
    \n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.');
            }
        });
    });


    bot.onText(/üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä../, async(msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?', contactRequest);

        bot.once('contact', async(contactMsg) => {
            const chatId = contactMsg.chat.id;
            if (contactMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?') {
                const newPhoneFromContact = contactMsg.contact.phone_number;
                phoneText = newPhoneFromContact;
                try {
                    await Address.findOneAndUpdate({}, { phone: phoneText });
                    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> 
                    \n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
    <b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} 
    <b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text}
    <b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ 
    <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText}
        \n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
    - ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

        bot.once('text', async(textMsg) => {
            const chatId = textMsg.chat.id;

            if (textMsg.text !== '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑?' && textMsg.text.length === 11) {
                const newPhoneFromText = textMsg.text;
                phoneText = newPhoneFromText;
                try {
                    await Address.findOneAndUpdate({}, { phone: phoneText });
                    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> 
                    \n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
    <b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} 
    <b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text}
    <b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ 
    <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText}
        \n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
    - ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
            }
        });

    });
    phoneText = phone.contact ? phone.contact.phone_number.toString() : (phone.text && phone.text.length === 11 ? phone.text : '');
    const addressesForDelivery = new AddressForDelivery({
        firstAddressText: firstMessage.text,
        secondAddressText: secondMessage.text,
        type: type.text,
        price: price.text,
        phone: phoneText,

    });
    const savedAddress = await addressesForDelivery.save();
    savedAddressId = savedAddress._id;
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: '‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É' }],
                [{ text: 'üñä ”®–∑–≥–µ—Ä—ñ—Å –µ–Ω–≥—ñ–∑y' }],
                [{ text: '‚ùå –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂–æ—é' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, `–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω <b>—Ä–∞—Å—Ç–∞—É “õ–∞–∂–µ—Ç</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text} \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneText} \n\n–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω \n- ‚úÖ <b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É</b> –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞—É “õ–∞–∂–µ—Ç`, { parse_mode: "HTML", ...keyboard });
    forwardmessage = `<b>---–ñ–ê“¢–ê –¢–ê–ü–°–´–†–´–°---</b> \n\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text} \n<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text} \n<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text} \n\n<b>–¢–∞–ø—Å—ã—Ä—ã—Å —Ç–∏–ø—ñ: –ó–∞—Ç –∂–µ—Ç–∫—ñ–∑—É</b> \n<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏ \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>`;
    destination_message = `<b>${firstname} —Å—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã.</b>
    \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å ‚Ññ</b> ${chatId}
    \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å —Ç–∏–ø—ñ: –ó–∞—Ç –∂–µ—Ç–∫—ñ–∑—É</b>
\n<b>“ö–∞–π–¥–∞–Ω:</b> ${firstMessage.text}
<b>“ö–∞–π–¥–∞:</b> ${secondMessage.text}
<b>“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:</b> ${type.text} 
<b>–ë–∞“ì–∞—Å—ã:</b> ${price.text} ‚Ç∏`;
    client_phone = phoneText;
    order_price = price.text;
}
let forwardmessage = '';
let contract = ' ';
let destinationChatId = '-4094544621';
let client = ' ';
let client_phone = ' ';
let order_price = ' ';
bot.on('message', async(msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.first_name;
    const messageText = msg.text;
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: '–ß–µ–∫ –∂—ñ–±–µ—Ä—É',
                    url: 'https://t.me/damiraitbay'
                }]
            ]
        }
    }
    const discard = {
        reply_markup: {
            inline_keyboard: [
                [

                    {
                        text: '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—É',
                        callback_data: 'change_message'
                    }
                ]
            ]
        }
    }
    const apply = {
        reply_markup: {
            inline_keyboard: [
                [

                    {
                        text: '“ö–∞–±—ã–ª–¥–∞—É',
                        callback_data: 'apply_message'
                    }
                ]
            ]
        }
    }
    const getOrder = {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: 'üì≤–¢–∞–ø—Å—ã—Ä—ã—Å –∞–ª—ã–ø –±–∞—Å—Ç–∞—É',
                    url: 'https://t.me/+fVEoAG-R1RhhNmYy'
                }]
            ]
        }
    }
    switch (messageText) {
        case '–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É':
        case '/balance':
            let user1 = await User.findOne({ user_number: String(chatId).substring(0, 5) });
            if (user1) {
                bot.sendMessage(chatId, `ID <b>${chatId}</b> \n\n–°—ñ–∑–¥—ñ“£ –±–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥–∞ <b>${user1.balance} ‚Ç∏</b> \n–ë–æ–Ω—É—Å <b>0.00 ‚Ç∏</b> \n\n<b>–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É “Ø—à—ñ–Ω,</b> —Ç”©–º–µ–Ω–¥–µ–≥—ñ –Ω–æ–º–µ—Ä–≥–µ –∞—É–¥–∞—Ä–º–∞ –∂–∞—Å–∞–π—Å—ã–∑: \n- Kaspi Gold  / +77718466803 (–î–∞–º–∏—Ä –ê.) \n\n–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞“ì–∞ ”©—Ç—ñ–ø, –∞—É–¥–∞—Ä—ã–º <b>—á–µ–≥—ñ–Ω –∂—ñ–±–µ—Ä–µ—Å—ñ–∑</b>`, {
                    parse_mode: "HTML",
                    ...options

                });
            } else {
                bot.sendMessage(chatId, `ID <b>${chatId}</b> \n\n–°—ñ–∑–¥—ñ“£ –±–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥–∞ <b>0 ‚Ç∏</b> \n–ë–æ–Ω—É—Å <b>0.00 ‚Ç∏</b> \n\n<b>–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É “Ø—à—ñ–Ω,</b> —Ç”©–º–µ–Ω–¥–µ–≥—ñ –Ω–æ–º–µ—Ä–≥–µ –∞—É–¥–∞—Ä–º–∞ –∂–∞—Å–∞–π—Å—ã–∑: \n- Kaspi Gold  / +77718466803 (–î–∞–º–∏—Ä –ê.) \n\n–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞“ì–∞ ”©—Ç—ñ–ø, –∞—É–¥–∞—Ä—ã–º <b>—á–µ–≥—ñ–Ω –∂—ñ–±–µ—Ä–µ—Å—ñ–∑</b>`, {
                    parse_mode: "HTML",
                    ...options

                });
            }
            break;
        case '–¢–∞–∫—Å–∏ —à–∞“õ—ã—Ä—É':
        case '/taxi':
            await handleTaxiRequest(chatId);
            break;
        case '“ö—ã–∑—ã–ª–æ—Ä–¥–∞“ì–∞ —Ç–∞–∫—Å–∏':
            await handleTaxiForQyzylordaRequest(chatId);
            break;
        case '–ñ–µ—Ç–∫—ñ–∑—É(–î–æ—Å—Ç–∞–≤–∫–∞)':
            await handleDeliveryRequest(chatId);
            break;
        case '–¢–∞–∫—Å–∏ –±–æ–ª—É':
        case '/partner':
            await handlePartnerRequest(chatId);
            break;
        case '‚ùå –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂–æ—é':
            await bot.sendMessage(chatId, 'üöï');
            break;
        case '‚ùå ”®—Ç—ñ–Ω—ñ–º–¥—ñ –∂–æ—é':
            await bot.sendMessage(chatId, '–°“±—Ä–∞–Ω—ã–º ”©—à—ñ—Ä—ñ–ª–¥—ñ. –ñ–∞“£–∞–¥–∞–Ω —Å“±—Ä–∞–Ω—ã–º –±–µ—Ä—É “Ø—à—ñ–Ω /partner –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –æ—Ä—ã–Ω–¥–∞—É “õ–∞–∂–µ—Ç. –†–∞—Ö–º–µ—Ç!');
            break;
        case '‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –∂—ñ–±–µ—Ä—É':
            client = chatId;
            await bot.sendMessage(destinationChatId, `${forwardmessage} –∂–µ–∫–µ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ`, { parse_mode: "HTML", ...apply });
            await bot.sendMessage(chatId, `<b>–ñ–∞—É–∞–ø—Ç—ã</b> –∫“Ø—Ç—ñ“£—ñ–∑ \n\n–¢–∞–ø—Å—ã—Ä—ã—Å ”©“£–¥–µ–ª—É–¥–µ...  \n- –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã  \n\n<b>${username}</b>,  –ñ–∞–ª–∞“ì–∞—à –¢–∞–∫—Å–∏ —Å–µ—Ä–≤–∏—Å—ñ–Ω “õ–æ–ª–¥–∞–Ω“ì–∞“£—ã–∑“ì–∞ –†–∞—Ö–º–µ—Ç!`, { parse_mode: "HTML", ...discard });
            break;
        case '‚úÖ ”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ä–∞—Å—Ç–∞—É':
            await bot.sendMessage(chatId, contract, { parse_mode: "HTML", ...getOrder });
            await bot.sendMessage(chatId, 'üöï');
            break;
        case '–ê–∑—ã“õ-—Ç“Ø–ª—ñ–∫–∫–µ —Ç–∞–ø—Å—ã—Ä—ã—Å':
            await bot.sendMessage(chatId, `–ê–∑—ã“õ —Ç“Ø–ª—ñ–∫—Ç—ñ <b>15 –º–∏–Ω—É—Ç—Ç–∞</b> –∂–µ—Ç–∫—ñ–∑–µ–º—ñ–∑! 
            \n–ï–Ω–¥—ñ –¥“Ø–∫–µ–Ω–≥–µ –±–∞—Ä–º–∞–π –∞–∑—ã“õ-—Ç“Ø–ª—ñ–∫–∫–µ —Ç–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä–µ –∞–ª–∞—Å—ã–∑... 
- –ê–ª –±—ñ–∑ —Å—ñ–∑–≥–µ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç—ã <b>15 –º–∏–Ω—É—Ç—Ç–∞ –∂–µ—Ç–∫—ñ–∑–µ–º—ñ–∑.</b > 
\n–¢”©–º–µ–Ω–¥–µ–≥—ñ –¥“Ø–∫–µ–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –¥“Ø–∫–µ–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞ –∞–ª–∞—Å—ã–∑ `, { parse_mode: "HTML" });
            await bot.sendMessage(chatId, `üîπ <b>“ö–∞–ª–¥—ã–≥“Ø–ª –∞–ø–∞</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –°–º—É ”ò–ø—Ä–µ–∑–æ–≤ ”ò–±–∂–∞–ª–∏–µ–≤ “õ–∏—ã–ª—ã—Å—ã
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77059613071 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09: 00 - 23: 00
üîπ <b>–°—ã–º–±–∞—Ç –º–∞–≥–∞–∑–∏–Ω</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –®–∞–º–µ–Ω–æ–≤ 105
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77009616106 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09: 00 - 01: 00
üîπ <b>–ú—É–∑–∏—è –º–∞–≥–∞–∑–∏–Ω</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –ú—É–∑–∏—è –º–∞–≥–∞–∑–∏–Ω
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77075359906 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 08: 00 - 02: 00
üîπ <b>–ñ–µ–º—ñ—Å –∂–∏–¥–µ–∫</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –¢”©–ª–µ–≥–µ–Ω –±–∞–∑–∞—Ä–¥–∞“ì—ã –∂–µ–º—ñ—Å –∂–∏–¥–µ–∫
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77075435760 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09: 00 - 19: 00
üîπ <b> –ñ–∞–Ω–µ—Ä–∫–µ –º–∞–≥–∞–∑–∏–Ω </b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –ñ“Ø—Ä–≥–µ–Ω–æ–≤ –∫”©—à–µ–¥–µ–≥—ñ
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77768677318 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09: 00 - 00: 00
üîπ <b>–ê–¥–∏—è –º–∞–≥–∞–∑–∏–Ω</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –ë“±—Ö–∞—Ä–±–∞–π –∫”©—à–µ—Å—ñ
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77051420646 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09: 00 - 03: 00
üîπ <b>–ì“Ø–ª–Ω–∞–∑ –º–∞–≥–∞–∑–∏–Ω –∞–∑—ã“õ - —Ç“Ø–ª—ñ–∫ –±–∞—Ä –≥“Ø–ª–¥–µ—Ä –±–∞—Ä</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> “ö–∞–∑—ã–±–µ–∫ –±–∏ –∫”©—à–µ—Å—ñ
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77071780484 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 10: 00 - 02: 00
üîπ <b>–ñ–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i>“ö–∞–∑—ã–±–µ–∫ –±–∏ 56 / 9 246 “õ–∞—Å—ã
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77054301275 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 07: 30 - 03: 00 `, { parse_mode: "HTML" });

            break;
        case '–î”ô—Ä—ñ—Ö–∞–Ω–∞–ª–∞—Ä':
            await bot.sendMessage(chatId, `üîπ <b>–í–∏—Ç–∞ –∞–ø—Ç–µ–∫–∞</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> –ù–∞—Ä—Ç–∞–π“ì–∞ “õ–∞—Ä–∞–º–∞ “õ–∞—Ä—Å—ã
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77026225000 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09: 00 - 19: 00 `, { parse_mode: "HTML" });
            break;
        case '–ì“Ø–ª–¥–µ—Ä':
            await bot.sendMessage(chatId, `üîπ<b>–ñ–∞–ª–∞“ì–∞—à –≥“Ø–ª–¥–µ—Ä</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> 
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77023749174 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09:00 - 22:00
üîπ <b>–ê–π–ª–∏–Ω</b> 
<i>–ú–µ–∫–µ–Ω-–∂–∞–π:</i> 
<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> +77074132310 
<i>–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã:</i> 09:00 - 21:00 `, { parse_mode: "HTML" });
            break;
        case '/topup':
            await adding_balance(chatId);
            break;
    }
});
let destination_message = ' ';
bot.on('callback_query', async(callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.from.id;
    const messageId = callbackQuery.message.message_id;
    const username = callbackQuery.from.first_name;
    const driver_done = {
        reply_markup: {
            inline_keyboard: [
                [

                    {
                        text: '–ú–µ–Ω –∫–µ–ª–¥—ñ–º',
                        callback_data: 'done_message'
                    }
                ]
            ]
        }
    }
    if (data === 'change_message') {
        bot.editMessageText(`<b>${ username }</b>, —Å—ñ–∑–¥—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –∫–µ—Ä—ñ “õ–∞–π—Ç–∞—Ä—ã–ª–¥—ã. \n\n<b>- –ñ–∞–ª–∞“ì–∞—à –¢–∞–∫—Å–∏</b> “õ—ã–∑–º–µ—Ç—ñ–Ω “õ–æ–ª–¥–∞–Ω“ì–∞“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç!`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "HTML"
        });
    }
    if (data === 'done_message') {
        let driver = await taxiDates.findOne({ driver_id: String(chatId).substring(0, 5) });
        bot.editMessageText(`${forwardmessage} ${client_phone}
        \n“ö–∞–±—ã–ª–¥–∞–¥—ã: ${driver.firstname}`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "HTML",
        });
        await bot.sendMessage(client, `–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –∫–µ–ª–¥—ñ. –°—ñ–∑–¥—ñ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –∂–µ—Ä–¥–µ –∫“Ø—Ç—É–¥–µ`, { chat_id: chatId, parse_mode: "HTML" });

    }
    if (data === 'apply_message') {
        let driver = await taxiDates.findOne({ driver_id: String(chatId).substring(0, 5) });
        let user = await User.findOne({ user_number: String(chatId).substring(0, 5) });
        user.balance = user.balance - order_price * 0.1;
        balance1 = user.balance;
        await user.save();
        if (user && driver && user.balance > 0) {
            await bot.sendMessage(client, `${destination_message} 
        \n<b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ:</b> ${driver.firstname} ${driver.secondname} 
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}
<b>Kaspi Gold:</b> ${driver.cardnumber}
\n<b>–ö”©–ª—ñ–∫ –ú–æ–¥–µ–ª—ñ:</b> ${driver.carModel}
<b>–ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ:</b> ${driver.carNumber}
        \n–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ –∫“Ø—Ç—ñ“£—ñ–∑. –°”ô—Ç—Ç—ñ–ª—ñ–∫!`, { chat_id: chatId, parse_mode: "HTML" });
            await bot.sendMessage(chatId, `${forwardmessage} ${client_phone}
        \n“ö–∞–±—ã–ª–¥–∞–¥—ã: ${driver.firstname} ${driver.secondname}`, { chat_id: chatId, parse_mode: "HTML", ...driver_done });
            bot.editMessageText(`${forwardmessage} –∂–µ–∫–µ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ
        \n<b>–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–±—ã–ª–¥–∞–¥—ã:</b> ${driver.firstname}`, {
                chat_id: destinationChatId,
                message_id: messageId,
                parse_mode: "HTML"
            });
        } else if (!driver) {
            await bot.sendMessage(chatId, `”®—Ç—ñ–Ω–µ–º—ñ–Ω ”©–∑—ñ“£—ñ–∑ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –∂–∞–∑—ã“£—ã–∑. –û–ª “Ø—à—ñ–Ω /partner –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑`, { chat_id: chatId, parse_mode: "HTML" });
        } else {
            await bot.sendMessage(chatId, `–°—ñ–∑–¥—ñ“£ –±–∞–ª–∞–Ω—Å—ã“£—ã–∑ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–±—ã–ª–¥–∞—É “Ø—à—ñ–Ω –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑.–ë–∞–ª–∞–Ω—Å—ã“£—ã–∑–¥—ã —Ç–æ–ª—Ç—ã—Ä—É “Ø—à—ñ–Ω –º”ô–∑—ñ—Ä–¥–µ–≥—ñ <b>–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É</b> (/balance) –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω–∞ ”©—Ç—ñ“£—ñ–∑.`, { chat_id: chatId, parse_mode: "HTML" });

        }
    }
});
async function waitForUserResponse(chatId) {
    return new Promise((resolve) => {
        bot.once('message', (msg) => {
            if (msg.chat.id === chatId && (!msg.entities || msg.contact || (msg.text && msg.text.length === 11))) {
                resolve(msg);
            }
        });
    });
}
bot.onText(/üñä ”®–∑–≥–µ—Ä—ñ—Å –µ–Ω–≥—ñ–∑—É/, async(msg) => {
    const chatId = msg.chat.id;
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: 'üåé –®—ã“ìa—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π.' }],
                [{ text: 'üåé –ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π.' }],
                [{ text: 'üíµ –ñ–æ–ª –∞“õ—ã—Å—ã.' }],
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä.' }],
                [{ text: 'üë§ –ñ–æ–ª–∞—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã.' }],
                [{ text: '‚è∞ –£–∞“õ—ã—Ç.' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω “õ–∞–∂–µ—Ç—Ç—ñ “±—è—à—ã“õ—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', keyboard);
});
bot.onText(/üñä ”®–∑–≥–µ—Ä—ñ—Å –µ–Ω–≥—ñ–∑y/, async(msg) => {
    const chatId = msg.chat.id;
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: 'üåé –ê–ª—ã–ø –∫–µ—Ç–µ—Ç—ñ–Ω –º–µ–∫–µ–Ω-–∂–∞–π' }],
                [{ text: 'üåé –ñ–µ—Ç–∫—ñ–∑–µ—Ç—ñ–Ω –º–µ–∫–µ–Ω-–∂–∞–π' }],
                [{ text: 'üìã “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç' }],
                [{ text: 'üíµ –ñ–æ–ª –∞“õ—ã—Å—ã..' }],
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä..' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω “õ–∞–∂–µ—Ç—Ç—ñ “±—è—à—ã“õ—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', keyboard);
});
bot.onText(/üñä ”®–∑–≥–µp—ñ—Å –µ–Ω–≥—ñ–∑—É/, async(msg) => {
    const chatId = msg.chat.id;
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: 'üöπ ‚Äç–ï—Å—ñ–º—ñ' }],
                [{ text: 'üöπ ‚Äç–¢–µ–≥—ñ' }],
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–ºe—Ä—ñ' }],
                [{ text: 'üí≥ KASPI GOLD' }],
                [{ text: 'üöò –ö”©–ª—ñ–∫ –º–æ–¥–µ–ª—ñ' }],
                [{ text: 'üöò –ö”©–ª—ñ–∫ –Ω–æ–º–µ—Ä—ñ' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '”®–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω “õ–∞–∂–µ—Ç—Ç—ñ “±—è—à—ã“õ—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', keyboard);
});
bot.onText(/üñä ”®–∑–≥–µ—Ä—ñc –µ–Ω–≥—ñ–∑—É/, async(msg) => {
    const chatId = msg.chat.id;
    const keyboard = {
        reply_markup: {
            keyboard: [
                [{ text: 'üåé –®—ã“ì–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π' }],
                [{ text: 'üåé –ë–∞—Ä–∞—Ç—ã–Ω –º–µ–∫–µ–Ω-–∂–∞–π' }],
                [{ text: 'üíµ –ñ–æ–ª –∞“õ—ã—Å—ã' }],
                [{ text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä' }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    await bot.sendMessage(chatId, '–¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã ”©–∑–≥–µ—Ä—Ç—É “Ø—à—ñ–Ω “õ–∞–∂–µ—Ç—Ç—ñ “±—è—à—ã“õ—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', keyboard);
});
